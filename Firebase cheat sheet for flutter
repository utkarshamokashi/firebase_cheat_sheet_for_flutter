1.	ADDING DATA
async {
  Navigator.of(context).pop();
  await _project.collection("project").document(myController.text).setData({
    "project_name": myController.text,
    "project_id": 50,
    "project_code": randomAlphaNumeric(8),
    "created_at": DateTime.now(),
    "created_by": Variables.currentEmail,
  });


2.	FETCHING DATA
_note.collection("notes")
    .where("notes_id", isEqualTo: Variables.currentNote).snapshots().listen((data)=>data.documents.forEach((doc) {
  setState(() {
     Variables.currentNoteTitle=doc["notes_title"];
     Variables.currentNoteContent=doc["project_notes"];
}


3.	UPDATING or EDITING DATA
await _note.collection("notes").document(Variables.currentNote).updateData({
  "notes_title": title,
  "project_notes": text,
  "project_name": Variables.currentProject,
  "updated_at": DateTime.now(),
  "updated_by": Variables.currentEmail,
  "category": Variables.notesPage,
});
                                          "OR"
onPressed: () async{
  await _project
      .collection("project")
      .where("project_code", isEqualTo: myController.text).snapshots().listen((data)=>data.documents.forEach((doc) {
    setState(() {
      S=doc["project_name"];
      print(S);
      _project.collection("project").document(S).updateData({"collaborators": FieldValue.arrayUnion([Variables.currentEmail])});
    });
  }));
  Navigator.of(context).pop();
},


4.	DISPLAYING DATA
StreamBuilder(
  stream: _project
      .collection("project")
      .where("collaborators",arrayContains: Variables.currentEmail)
      .snapshots(),
  builder: (context, snapshot) {
    if (!snapshot.hasData) {
      return Text(
        'No Data...',
      );
    } else {
      var lists = snapshot.data.documents;
      return ListView.builder(
          shrinkWrap: true,
          itemCount: lists.length,
          itemBuilder: (BuildContext context, int index) {
            return card(lists[index]["project_name"]);
          });
    }
  },
),

